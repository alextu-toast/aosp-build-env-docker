name: Docker

on:
  repository_dispatch:
    types: rebuild-image

  schedule:
    - cron: '0 0 * * SUN'

  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - i700

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          export DOCKER_BUILDKIT=1
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile_18.04
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'repository_dispatch'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          export DOCKER_BUILDKIT=1
          docker build . --file Dockerfile_18.04 --tag $IMAGE_NAME-18.04

      # refer to https://github.com/marketplace/actions/docker-login
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME-18.04 $IMAGE_ID:$VERSION
          #docker tag $IMAGE_NAME-18.04 $IMAGE_ID:bionic
          docker push $IMAGE_ID:$VERSION
          #docker push $IMAGE_ID:bionic
